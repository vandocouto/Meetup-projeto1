currentBuild.displayName = "1.0.${BUILD_NUMBER}"
currentBuild.description = "Meetup Churrops"

node ('master') {
    try {
        stage('Slack Notification'){
            notifyBuild('STARTED')
        }

        stage('Fetch') {
            checkout scm
            pollSCM 'H/1 * * * *'
        }

        stage ('Docker Login') {
            withCredentials([string(credentialsId: 'REGISTRY', variable: 'REGISTRY')]) {
                sh "sudo docker login -u churrops -p $REGISTRY registry.churrops.com"
            }
        }

        stage ('Build Container') {
            sh "sudo docker build -f build/Dockerfile -t registry.churrops.com/projeto1:'${currentBuild.displayName}' ."
        }

        stage ('Push Docker Registry'){
            sh "sudo docker push registry.churrops.com/projeto1:'${currentBuild.displayName}'"
        }

        stage ('kubernetes Admin') {
            sshagent(['KubernetesApi']) {
                sh 'ssh -o StrictHostKeyChecking=no ubuntu@api.churrops.com uname -a'
            }
        }

        stage ('Verify Branch') {

            if (env.BRANCH_NAME == 'master') {
                echo 'branch master'
                stage ('Build - Deploy - Container') {
                        sh "ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/hosts-kube ./ansible/tasks/main.yml --tags projeto1_master-kube --extra-vars version='${currentBuild.displayName}'"
                    }
                }
            else {
                echo "branch not master"
            }

            if (env.BRANCH_NAME == 'staging') {
                echo 'branch staging'
                stage ('Build - Deploy - Container') {
                        sh "ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/hosts-kube ./ansible/tasks/main.yml --tags projeto1_staging-kube --extra-vars version='${currentBuild.displayName}'"
                    }
                }
            }
            else {
                echo "branch not staging"
            }
        }
    }
    catch (e) {
        currentBuild.result = "FAILED"
        throw e
    }
    finally {
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${currentBuild.displayName}]'"
    def summary = "${subject} (<${env.BUILD_URL}|Open>)"

    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    }
    else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    }
    else {
        color = 'RED'
        colorCode = '#FF0000'
    }
    slackSend (color: colorCode, message: summary)
}
